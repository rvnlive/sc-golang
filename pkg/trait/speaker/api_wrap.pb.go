// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package speaker

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	types "github.com/smart-core-os/sc-api/go/types"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// Wrap Api	adapts a traits.SpeakerApiServer	and presents it as a traits.SpeakerApiClient
func WrapApi(server traits.SpeakerApiServer) traits.SpeakerApiClient {
	return &apiWrapper{server}
}

type apiWrapper struct {
	server traits.SpeakerApiServer
}

// compile time check that we implement the interface we need
var _ traits.SpeakerApiClient = (*apiWrapper)(nil)

func (w *apiWrapper) GetVolume(ctx context.Context, req *traits.GetSpeakerVolumeRequest, _ ...grpc.CallOption) (*types.AudioLevel, error) {
	return w.server.GetVolume(ctx, req)
}

func (w *apiWrapper) UpdateVolume(ctx context.Context, req *traits.UpdateSpeakerVolumeRequest, _ ...grpc.CallOption) (*types.AudioLevel, error) {
	return w.server.UpdateVolume(ctx, req)
}

func (w *apiWrapper) PullVolume(ctx context.Context, in *traits.PullSpeakerVolumeRequest, opts ...grpc.CallOption) (traits.SpeakerApi_PullVolumeClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullVolumeApiServerWrapper{stream.Server()}
	client := &pullVolumeApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullVolume(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullVolumeApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullVolumeApiClientWrapper) Recv() (*traits.PullSpeakerVolumeResponse, error) {
	m := new(traits.PullSpeakerVolumeResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullVolumeApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullVolumeApiServerWrapper) Send(response *traits.PullSpeakerVolumeResponse) error {
	return s.ServerStream.SendMsg(response)
}

// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package hail

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapApi	adapts a traits.HailApiServer	and presents it as a traits.HailApiClient
func WrapApi(server traits.HailApiServer) traits.HailApiClient {
	return &apiWrapper{server}
}

type apiWrapper struct {
	server traits.HailApiServer
}

// compile time check that we implement the interface we need
var _ traits.HailApiClient = (*apiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *apiWrapper) UnwrapServer() traits.HailApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *apiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *apiWrapper) CreateHail(ctx context.Context, req *traits.CreateHailRequest, _ ...grpc.CallOption) (*traits.Hail, error) {
	return w.server.CreateHail(ctx, req)
}

func (w *apiWrapper) GetHail(ctx context.Context, req *traits.GetHailRequest, _ ...grpc.CallOption) (*traits.Hail, error) {
	return w.server.GetHail(ctx, req)
}

func (w *apiWrapper) UpdateHail(ctx context.Context, req *traits.UpdateHailRequest, _ ...grpc.CallOption) (*traits.Hail, error) {
	return w.server.UpdateHail(ctx, req)
}

func (w *apiWrapper) DeleteHail(ctx context.Context, req *traits.DeleteHailRequest, _ ...grpc.CallOption) (*traits.DeleteHailResponse, error) {
	return w.server.DeleteHail(ctx, req)
}

func (w *apiWrapper) PullHail(ctx context.Context, in *traits.PullHailRequest, opts ...grpc.CallOption) (traits.HailApi_PullHailClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullHailApiServerWrapper{stream.Server()}
	client := &pullHailApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullHail(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullHailApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullHailApiClientWrapper) Recv() (*traits.PullHailResponse, error) {
	m := new(traits.PullHailResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullHailApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullHailApiServerWrapper) Send(response *traits.PullHailResponse) error {
	return s.ServerStream.SendMsg(response)
}

func (w *apiWrapper) ListHails(ctx context.Context, req *traits.ListHailsRequest, _ ...grpc.CallOption) (*traits.ListHailsResponse, error) {
	return w.server.ListHails(ctx, req)
}

func (w *apiWrapper) PullHails(ctx context.Context, in *traits.PullHailsRequest, opts ...grpc.CallOption) (traits.HailApi_PullHailsClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullHailsApiServerWrapper{stream.Server()}
	client := &pullHailsApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullHails(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullHailsApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullHailsApiClientWrapper) Recv() (*traits.PullHailsResponse, error) {
	m := new(traits.PullHailsResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullHailsApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullHailsApiServerWrapper) Send(response *traits.PullHailsResponse) error {
	return s.ServerStream.SendMsg(response)
}

// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package light

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// Wrap Api	adapts a traits.LightApiServer	and presents it as a traits.LightApiClient
func WrapApi(server traits.LightApiServer) traits.LightApiClient {
	return &apiWrapper{server}
}

type apiWrapper struct {
	server traits.LightApiServer
}

// compile time check that we implement the interface we need
var _ traits.LightApiClient = (*apiWrapper)(nil)

func (w *apiWrapper) UpdateBrightness(ctx context.Context, req *traits.UpdateBrightnessRequest, _ ...grpc.CallOption) (*traits.Brightness, error) {
	return w.server.UpdateBrightness(ctx, req)
}

func (w *apiWrapper) GetBrightness(ctx context.Context, req *traits.GetBrightnessRequest, _ ...grpc.CallOption) (*traits.Brightness, error) {
	return w.server.GetBrightness(ctx, req)
}

func (w *apiWrapper) PullBrightness(ctx context.Context, in *traits.PullBrightnessRequest, opts ...grpc.CallOption) (traits.LightApi_PullBrightnessClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullBrightnessApiServerWrapper{stream.Server()}
	client := &pullBrightnessApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullBrightness(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullBrightnessApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullBrightnessApiClientWrapper) Recv() (*traits.PullBrightnessResponse, error) {
	m := new(traits.PullBrightnessResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullBrightnessApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullBrightnessApiServerWrapper) Send(response *traits.PullBrightnessResponse) error {
	return s.ServerStream.SendMsg(response)
}

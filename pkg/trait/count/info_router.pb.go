// Code generated by protoc-gen-router. DO NOT EDIT.

package count

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// InfoRouter is a traits.CountInfoServer that allows routing named requests to specific traits.CountInfoClient
type InfoRouter struct {
	traits.UnimplementedCountInfoServer

	router *router.Router
}

// compile time check that we implement the interface we need
var _ traits.CountInfoServer = (*InfoRouter)(nil)

func NewInfoRouter(opts ...router.Option) *InfoRouter {
	return &InfoRouter{
		router: router.NewRouter(opts...),
	}
}

// WithCountInfoClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithCountInfoClientFactory(f func(name string) (traits.CountInfoClient, error)) router.Option {
	return router.WithFactory(func(name string) (interface{}, error) {
		return f(name)
	})
}

func (r *InfoRouter) Register(server *grpc.Server) {
	traits.RegisterCountInfoServer(server, r)
}

func (r *InfoRouter) Add(name string, client traits.CountInfoClient) traits.CountInfoClient {
	res := r.router.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(traits.CountInfoClient)
}

func (r *InfoRouter) Remove(name string) traits.CountInfoClient {
	res := r.router.Remove(name)
	if res == nil {
		return nil
	}
	return res.(traits.CountInfoClient)
}

func (r *InfoRouter) Has(name string) bool {
	return r.router.Has(name)
}

func (r *InfoRouter) Get(name string) (traits.CountInfoClient, error) {
	res, err := r.router.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(traits.CountInfoClient), nil
}

func (r *InfoRouter) DescribeCount(ctx context.Context, request *traits.DescribeCountRequest) (*traits.CountSupport, error) {
	child, err := r.Get(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DescribeCount(ctx, request)
}

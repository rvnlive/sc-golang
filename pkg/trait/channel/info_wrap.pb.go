// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package channel

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	grpc "google.golang.org/grpc"
)

// WrapInfo	adapts a traits.ChannelInfoServer	and presents it as a traits.ChannelInfoClient
func WrapInfo(server traits.ChannelInfoServer) traits.ChannelInfoClient {
	return &infoWrapper{server}
}

type infoWrapper struct {
	server traits.ChannelInfoServer
}

// compile time check that we implement the interface we need
var _ traits.ChannelInfoClient = (*infoWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *infoWrapper) UnwrapServer() traits.ChannelInfoServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *infoWrapper) Unwrap() interface{} {
	return w.UnwrapServer()
}

func (w *infoWrapper) DescribeChosenChannel(ctx context.Context, req *traits.DescribeChosenChannelRequest, _ ...grpc.CallOption) (*traits.ChosenChannelSupport, error) {
	return w.server.DescribeChosenChannel(ctx, req)
}

// Code generated by protoc-gen-router. DO NOT EDIT.

package onoff

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// InfoRouter is a traits.OnOffInfoServer that allows routing named requests to specific traits.OnOffInfoClient
type InfoRouter struct {
	traits.UnimplementedOnOffInfoServer

	mu       sync.Mutex
	registry map[string]traits.OnOffInfoClient
	// Factory can be used to dynamically create api clients if requests come in for devices we haven't seen.
	Factory func(string) (traits.OnOffInfoClient, error)
}

// compile time check that we implement the interface we need
var _ traits.OnOffInfoServer = (*InfoRouter)(nil)

func NewInfoRouter() *InfoRouter {
	return &InfoRouter{
		registry: make(map[string]traits.OnOffInfoClient),
	}
}

func (r *InfoRouter) Register(server *grpc.Server) {
	traits.RegisterOnOffInfoServer(server, r)
}

func (r *InfoRouter) Add(name string, client traits.OnOffInfoClient) traits.OnOffInfoClient {
	r.mu.Lock()
	defer r.mu.Unlock()
	old := r.registry[name]
	r.registry[name] = client
	return old
}

func (r *InfoRouter) Remove(name string) traits.OnOffInfoClient {
	r.mu.Lock()
	defer r.mu.Unlock()
	old := r.registry[name]
	delete(r.registry, name)
	return old
}

func (r *InfoRouter) Has(name string) bool {
	r.mu.Lock()
	defer r.mu.Unlock()
	_, exists := r.registry[name]
	return exists
}

func (r *InfoRouter) Get(name string) (traits.OnOffInfoClient, error) {
	r.mu.Lock()
	child, exists := r.registry[name]
	defer r.mu.Unlock()
	if !exists {
		if r.Factory != nil {
			child, err := r.Factory(name)
			if err != nil {
				return nil, err
			}
			r.registry[name] = child
			return child, nil
		}
		return nil, status.Error(codes.NotFound, name)
	}
	return child, nil
}

func (r *InfoRouter) DescribeOnOff(ctx context.Context, request *traits.DescribeOnOffRequest) (*traits.OnOffSupport, error) {
	child, err := r.Get(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DescribeOnOff(ctx, request)
}

// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package parent

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// Wrap Api	adapts a traits.ParentApiServer	and presents it as a traits.ParentApiClient
func WrapApi(server traits.ParentApiServer) traits.ParentApiClient {
	return &apiWrapper{server}
}

type apiWrapper struct {
	server traits.ParentApiServer
}

// compile time check that we implement the interface we need
var _ traits.ParentApiClient = (*apiWrapper)(nil)

func (w *apiWrapper) ListChildren(ctx context.Context, req *traits.ListChildrenRequest, _ ...grpc.CallOption) (*traits.ListChildrenResponse, error) {
	return w.server.ListChildren(ctx, req)
}

func (w *apiWrapper) PullChildren(ctx context.Context, in *traits.PullChildrenRequest, opts ...grpc.CallOption) (traits.ParentApi_PullChildrenClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullChildrenApiServerWrapper{stream.Server()}
	client := &pullChildrenApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullChildren(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullChildrenApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullChildrenApiClientWrapper) Recv() (*traits.PullChildrenResponse, error) {
	m := new(traits.PullChildrenResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullChildrenApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullChildrenApiServerWrapper) Send(response *traits.PullChildrenResponse) error {
	return s.ServerStream.SendMsg(response)
}

// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package powersupply

import (
	context "context"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// Wrap MemorySettingsApi	adapts a MemorySettingsApiServer	and presents it as a MemorySettingsApiClient
func WrapMemorySettingsApi(server MemorySettingsApiServer) MemorySettingsApiClient {
	return &memorySettingsApiWrapper{server}
}

type memorySettingsApiWrapper struct {
	server MemorySettingsApiServer
}

// compile time check that we implement the interface we need
var _ MemorySettingsApiClient = (*memorySettingsApiWrapper)(nil)

func (w *memorySettingsApiWrapper) GetSettings(ctx context.Context, req *GetMemorySettingsReq, _ ...grpc.CallOption) (*MemorySettings, error) {
	return w.server.GetSettings(ctx, req)
}

func (w *memorySettingsApiWrapper) UpdateSettings(ctx context.Context, req *UpdateMemorySettingsReq, _ ...grpc.CallOption) (*MemorySettings, error) {
	return w.server.UpdateSettings(ctx, req)
}

func (w *memorySettingsApiWrapper) PullSettings(ctx context.Context, in *PullMemorySettingsReq, opts ...grpc.CallOption) (MemorySettingsApi_PullSettingsClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullSettingsMemorySettingsApiServerWrapper{stream.Server()}
	client := &pullSettingsMemorySettingsApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullSettings(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullSettingsMemorySettingsApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullSettingsMemorySettingsApiClientWrapper) Recv() (*PullMemorySettingsRes, error) {
	m := new(PullMemorySettingsRes)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullSettingsMemorySettingsApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullSettingsMemorySettingsApiServerWrapper) Send(response *PullMemorySettingsRes) error {
	return s.ServerStream.SendMsg(response)
}

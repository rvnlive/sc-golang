// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package powersupply

import (
	context "context"
	traits "github.com/smart-core-os/sc-api/go/traits"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// WrapApi	adapts a traits.PowerSupplyApiServer	and presents it as a traits.PowerSupplyApiClient
func WrapApi(server traits.PowerSupplyApiServer) traits.PowerSupplyApiClient {
	return &apiWrapper{server}
}

type apiWrapper struct {
	server traits.PowerSupplyApiServer
}

// compile time check that we implement the interface we need
var _ traits.PowerSupplyApiClient = (*apiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *apiWrapper) UnwrapServer() traits.PowerSupplyApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *apiWrapper) Unwrap() interface{} {
	return w.UnwrapServer()
}

func (w *apiWrapper) GetPowerCapacity(ctx context.Context, req *traits.GetPowerCapacityRequest, _ ...grpc.CallOption) (*traits.PowerCapacity, error) {
	return w.server.GetPowerCapacity(ctx, req)
}

func (w *apiWrapper) PullPowerCapacity(ctx context.Context, in *traits.PullPowerCapacityRequest, opts ...grpc.CallOption) (traits.PowerSupplyApi_PullPowerCapacityClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullPowerCapacityApiServerWrapper{stream.Server()}
	client := &pullPowerCapacityApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullPowerCapacity(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullPowerCapacityApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullPowerCapacityApiClientWrapper) Recv() (*traits.PullPowerCapacityResponse, error) {
	m := new(traits.PullPowerCapacityResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullPowerCapacityApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullPowerCapacityApiServerWrapper) Send(response *traits.PullPowerCapacityResponse) error {
	return s.ServerStream.SendMsg(response)
}

func (w *apiWrapper) ListDrawNotifications(ctx context.Context, req *traits.ListDrawNotificationsRequest, _ ...grpc.CallOption) (*traits.ListDrawNotificationsResponse, error) {
	return w.server.ListDrawNotifications(ctx, req)
}

func (w *apiWrapper) CreateDrawNotification(ctx context.Context, req *traits.CreateDrawNotificationRequest, _ ...grpc.CallOption) (*traits.DrawNotification, error) {
	return w.server.CreateDrawNotification(ctx, req)
}

func (w *apiWrapper) UpdateDrawNotification(ctx context.Context, req *traits.UpdateDrawNotificationRequest, _ ...grpc.CallOption) (*traits.DrawNotification, error) {
	return w.server.UpdateDrawNotification(ctx, req)
}

func (w *apiWrapper) DeleteDrawNotification(ctx context.Context, req *traits.DeleteDrawNotificationRequest, _ ...grpc.CallOption) (*emptypb.Empty, error) {
	return w.server.DeleteDrawNotification(ctx, req)
}

func (w *apiWrapper) PullDrawNotifications(ctx context.Context, in *traits.PullDrawNotificationsRequest, opts ...grpc.CallOption) (traits.PowerSupplyApi_PullDrawNotificationsClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullDrawNotificationsApiServerWrapper{stream.Server()}
	client := &pullDrawNotificationsApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullDrawNotifications(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullDrawNotificationsApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullDrawNotificationsApiClientWrapper) Recv() (*traits.PullDrawNotificationsResponse, error) {
	m := new(traits.PullDrawNotificationsResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullDrawNotificationsApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullDrawNotificationsApiServerWrapper) Send(response *traits.PullDrawNotificationsResponse) error {
	return s.ServerStream.SendMsg(response)
}

// Code generated by protoc-gen-router. DO NOT EDIT.

package powersupply

import (
	context "context"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
	io "io"
)

// MemorySettingsApiRouter is a MemorySettingsApiServer that allows routing named requests to specific MemorySettingsApiClient
type MemorySettingsApiRouter struct {
	UnimplementedMemorySettingsApiServer

	router *router.Router
}

// compile time check that we implement the interface we need
var _ MemorySettingsApiServer = (*MemorySettingsApiRouter)(nil)

func NewMemorySettingsApiRouter(opts ...router.Option) *MemorySettingsApiRouter {
	return &MemorySettingsApiRouter{
		router: router.NewRouter(opts...),
	}
}

// WithMemorySettingsApiClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithMemorySettingsApiClientFactory(f func(name string) (MemorySettingsApiClient, error)) router.Option {
	return router.WithFactory(func(name string) (interface{}, error) {
		return f(name)
	})
}

func (r *MemorySettingsApiRouter) Register(server *grpc.Server) {
	RegisterMemorySettingsApiServer(server, r)
}

func (r *MemorySettingsApiRouter) Add(name string, client MemorySettingsApiClient) MemorySettingsApiClient {
	res := r.router.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(MemorySettingsApiClient)
}

func (r *MemorySettingsApiRouter) Remove(name string) MemorySettingsApiClient {
	res := r.router.Remove(name)
	if res == nil {
		return nil
	}
	return res.(MemorySettingsApiClient)
}

func (r *MemorySettingsApiRouter) Has(name string) bool {
	return r.router.Has(name)
}

func (r *MemorySettingsApiRouter) Get(name string) (MemorySettingsApiClient, error) {
	res, err := r.router.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(MemorySettingsApiClient), nil
}

func (r *MemorySettingsApiRouter) GetSettings(ctx context.Context, request *GetMemorySettingsReq) (*MemorySettings, error) {
	child, err := r.Get(request.Name)
	if err != nil {
		return nil, err
	}

	return child.GetSettings(ctx, request)
}

func (r *MemorySettingsApiRouter) UpdateSettings(ctx context.Context, request *UpdateMemorySettingsReq) (*MemorySettings, error) {
	child, err := r.Get(request.Name)
	if err != nil {
		return nil, err
	}

	return child.UpdateSettings(ctx, request)
}

func (r *MemorySettingsApiRouter) PullSettings(request *PullMemorySettingsReq, server MemorySettingsApi_PullSettingsServer) error {
	child, err := r.Get(request.Name)
	if err != nil {
		return err
	}

	// so we can cancel our forwarding request if we can't send responses to our caller
	reqCtx, reqDone := context.WithCancel(server.Context())
	// issue the request
	stream, err := child.PullSettings(reqCtx, request)
	if err != nil {
		return err
	}

	// send the stream header
	header, err := stream.Header()
	if err != nil {
		return err
	}
	if err = server.SendHeader(header); err != nil {
		return err
	}

	// send all the messages
	// false means the error is from the child, true means the error is from the caller
	var callerError bool
	for {
		// Impl note: we could improve throughput here by issuing the Recv and Send in different goroutines, but we're doing
		// it synchronously until we have a need to change the behaviour

		var msg *PullMemorySettingsRes
		msg, err = stream.Recv()
		if err != nil {
			break
		}

		err = server.Send(msg)
		if err != nil {
			callerError = true
			break
		}
	}

	// err is guaranteed to be non-nil as it's the only way to exit the loop
	if callerError {
		// cancel the request
		reqDone()
		return err
	} else {
		if trailer := stream.Trailer(); trailer != nil {
			server.SetTrailer(trailer)
		}
		if err == io.EOF {
			return nil
		}
		return err
	}
}

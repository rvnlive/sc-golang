// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package powersupply

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemorySettingsApiClient is the client API for MemorySettingsApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemorySettingsApiClient interface {
	GetSettings(ctx context.Context, in *GetMemorySettingsReq, opts ...grpc.CallOption) (*MemorySettings, error)
	UpdateSettings(ctx context.Context, in *UpdateMemorySettingsReq, opts ...grpc.CallOption) (*MemorySettings, error)
	PullSettings(ctx context.Context, in *PullMemorySettingsReq, opts ...grpc.CallOption) (MemorySettingsApi_PullSettingsClient, error)
}

type memorySettingsApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMemorySettingsApiClient(cc grpc.ClientConnInterface) MemorySettingsApiClient {
	return &memorySettingsApiClient{cc}
}

func (c *memorySettingsApiClient) GetSettings(ctx context.Context, in *GetMemorySettingsReq, opts ...grpc.CallOption) (*MemorySettings, error) {
	out := new(MemorySettings)
	err := c.cc.Invoke(ctx, "/smartcore.go.trait.powersupply.MemorySettingsApi/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memorySettingsApiClient) UpdateSettings(ctx context.Context, in *UpdateMemorySettingsReq, opts ...grpc.CallOption) (*MemorySettings, error) {
	out := new(MemorySettings)
	err := c.cc.Invoke(ctx, "/smartcore.go.trait.powersupply.MemorySettingsApi/UpdateSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memorySettingsApiClient) PullSettings(ctx context.Context, in *PullMemorySettingsReq, opts ...grpc.CallOption) (MemorySettingsApi_PullSettingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemorySettingsApi_ServiceDesc.Streams[0], "/smartcore.go.trait.powersupply.MemorySettingsApi/PullSettings", opts...)
	if err != nil {
		return nil, err
	}
	x := &memorySettingsApiPullSettingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MemorySettingsApi_PullSettingsClient interface {
	Recv() (*PullMemorySettingsRes, error)
	grpc.ClientStream
}

type memorySettingsApiPullSettingsClient struct {
	grpc.ClientStream
}

func (x *memorySettingsApiPullSettingsClient) Recv() (*PullMemorySettingsRes, error) {
	m := new(PullMemorySettingsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MemorySettingsApiServer is the server API for MemorySettingsApi service.
// All implementations must embed UnimplementedMemorySettingsApiServer
// for forward compatibility
type MemorySettingsApiServer interface {
	GetSettings(context.Context, *GetMemorySettingsReq) (*MemorySettings, error)
	UpdateSettings(context.Context, *UpdateMemorySettingsReq) (*MemorySettings, error)
	PullSettings(*PullMemorySettingsReq, MemorySettingsApi_PullSettingsServer) error
	mustEmbedUnimplementedMemorySettingsApiServer()
}

// UnimplementedMemorySettingsApiServer must be embedded to have forward compatible implementations.
type UnimplementedMemorySettingsApiServer struct {
}

func (UnimplementedMemorySettingsApiServer) GetSettings(context.Context, *GetMemorySettingsReq) (*MemorySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedMemorySettingsApiServer) UpdateSettings(context.Context, *UpdateMemorySettingsReq) (*MemorySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedMemorySettingsApiServer) PullSettings(*PullMemorySettingsReq, MemorySettingsApi_PullSettingsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullSettings not implemented")
}
func (UnimplementedMemorySettingsApiServer) mustEmbedUnimplementedMemorySettingsApiServer() {}

// UnsafeMemorySettingsApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemorySettingsApiServer will
// result in compilation errors.
type UnsafeMemorySettingsApiServer interface {
	mustEmbedUnimplementedMemorySettingsApiServer()
}

func RegisterMemorySettingsApiServer(s grpc.ServiceRegistrar, srv MemorySettingsApiServer) {
	s.RegisterService(&MemorySettingsApi_ServiceDesc, srv)
}

func _MemorySettingsApi_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemorySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemorySettingsApiServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.go.trait.powersupply.MemorySettingsApi/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemorySettingsApiServer).GetSettings(ctx, req.(*GetMemorySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemorySettingsApi_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemorySettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemorySettingsApiServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.go.trait.powersupply.MemorySettingsApi/UpdateSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemorySettingsApiServer).UpdateSettings(ctx, req.(*UpdateMemorySettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemorySettingsApi_PullSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullMemorySettingsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MemorySettingsApiServer).PullSettings(m, &memorySettingsApiPullSettingsServer{stream})
}

type MemorySettingsApi_PullSettingsServer interface {
	Send(*PullMemorySettingsRes) error
	grpc.ServerStream
}

type memorySettingsApiPullSettingsServer struct {
	grpc.ServerStream
}

func (x *memorySettingsApiPullSettingsServer) Send(m *PullMemorySettingsRes) error {
	return x.ServerStream.SendMsg(m)
}

// MemorySettingsApi_ServiceDesc is the grpc.ServiceDesc for MemorySettingsApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemorySettingsApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.go.trait.powersupply.MemorySettingsApi",
	HandlerType: (*MemorySettingsApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _MemorySettingsApi_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _MemorySettingsApi_UpdateSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullSettings",
			Handler:       _MemorySettingsApi_PullSettings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "memory_settings.proto",
}

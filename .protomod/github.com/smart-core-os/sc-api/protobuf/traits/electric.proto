syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "ElectricProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/change.proto";

// Trait for devices that are electrically powered.
// Can apply to both the end device or an intermediary, for example a TV or an extension cord.
service ElectricApi {
  // GetDemand returns the current electricity demand for the device.
  rpc GetDemand(GetDemandRequest) returns (ElectricDemand);
  // PullDemand returns a stream of changes to the current electricity demand for the device.
  rpc PullDemand(PullDemandRequest) returns (stream PullDemandResponse);

  rpc GetActiveMode(GetActiveModeRequest) returns (ElectricMode);
  // Configure the device to use the given mode.
  // The id of the given mode should match a known mode for the device.
  rpc UpdateActiveMode(UpdateActiveModeRequest) returns (ElectricMode);
  // ClearActiveMode instructs the device to discard any external mode selection, typically by applying the normal
  // operation mode for the device.
  rpc ClearActiveMode(ClearActiveModeRequest) returns (ElectricMode);
  rpc PullActiveMode(PullActiveModeRequest) returns (stream PullActiveModeResponse);

  // ListModes lists all electric modes for a device
  rpc ListModes(ListModesRequest) returns (ListModesResponse);
  // PullModes returns a stream of changes to the list of supported modes for the device.
  rpc PullModes(PullModesRequest) returns (stream PullModesResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service ElectricInfo {
  // todo: ElectricInfo service
}

// ElectricDemand describes how much power is being used by the device.
message ElectricDemand {
  // A measure of how much electric current is currently being used.
  // In amps.
  float current = 1;
  // The voltage level of the device.
  // In volts.
  // Zero means absent, not 0 volts.
  float voltage = 2;

  // The maximum current that the device can handle under normal operation.
  // In amps.
  // Zero means absent, not 0 amps.
  float rating = 3;
}

// An ElectricMode represents one possible electrical mode of operation for the device.
// A device can potentially have multiple electrical modes, for example a TV might have Normal and Eco modes.
// The electric mode of the device gives details on how the device expects its electricity usage to be affected when
// in these modes.
message ElectricMode {
  // ID uniquely identifies this mode in a device.
  string id = 1;
  // A human readable name for this mode.
  // Output only.
  // Examples might include "Eco Mode", or "Smart Standby"
  string title = 2;
  // A human readable description for this mode.
  string description = 3;

  // The voltage level of this mode.
  // In volts.
  // Zero means absent, not 0 volts.
  float voltage = 4;

  // The time the modes information is relative to in server time.
  // When a client receives a mode with an absent start time it should use its own clock to create one, though this
  // may introduce skew depending on the difference between the server and client clocks.
  google.protobuf.Timestamp start_time = 5;

  // A Segment describes electrical properties for a slice of time.
  message Segment {
    // The length of this mode segment.
    // An absent length means this segment lasts forever.
    // Only the last segment of a mode can have an absent length.
    google.protobuf.Duration length = 1;
    // The maximum current that will be drawn by the device in this segment.
    // In amps. Required.
    // See the shape properties to determine a more accurate shape for the electrical demand.
    float magnitude = 2;

    // The shape of the segment, useful as a more accurate data representation.
    // If none set assume fixed = magnitude.
    oneof shape {
      // Fixed represents a constant consumption for the length of this segment.
      // In amps.
      float fixed = 3;
    }
  }
  // An ordered, continuous, list of segments representing the power draw for this mode.
  // The first segment is relative to start_time, the second is relevant to the end of the first and so on.
  repeated Segment segments = 6;

  // When true this indicates that this mode is the normal / default operation mode for the device.
  // A device should have only one default mode.
  bool normal = 7;
}

message GetDemandRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the ElectricDemand type
  google.protobuf.FieldMask read_mask = 2;
}

message PullDemandRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the ElectricDemand type
  google.protobuf.FieldMask read_mask = 2;
}

message PullDemandResponse {
  // Changes since the last message.
  repeated Change changes = 1;

  message Change {
    // Name of the device that issued the change.
    string name = 1;
    // When the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the current demand.
    ElectricDemand demand = 3;
  }
}

message GetActiveModeRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the ElectricMode type
  google.protobuf.FieldMask read_mask = 2;
}
message UpdateActiveModeRequest {
  // Name of the device
  string name = 1;
  // The active mode to select.
  // The id field should be specified to select an existing mode.
  ElectricMode active_mode = 2;
  // Fields to update relative to the ElectricMode type.
  google.protobuf.FieldMask update_mask = 3;
}
message ClearActiveModeRequest {
  // Name of the device
  string name = 1;
}
message PullActiveModeRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the ElectricMode type
  google.protobuf.FieldMask read_mask = 2;
}
message PullActiveModeResponse {
  // Changes since the last message
  repeated Change changes = 1;

  message Change {
    // Name for the device that issued the change
    string name = 1;
    // When the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the active mode
    ElectricMode active_mode = 3;
  }
}

message ListModesRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the ElectricMode type
  google.protobuf.FieldMask read_mask = 2;

  // The maximum number of modes to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListModesResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;
}
message ListModesResponse {
  repeated ElectricMode modes = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of draw notifications.
  // This may be an estimate.
  int32 total_size = 3;
}
message PullModesRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the ElectricMode type
  google.protobuf.FieldMask read_mask = 2;
}
message PullModesResponse {
  // The list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // The name of the device that emitted this change
    string name = 1;
    // The type of change (e.g. ADD, UPDATE, etc...)
    smartcore.types.ChangeType type = 2;
    // The new value to use for ADD|UPDATE changes
    ElectricMode new_value = 3;
    // The old value to use for UPDATE|REMOVE changes
    ElectricMode old_value = 4;
    // When the change occurred
    google.protobuf.Timestamp change_time = 5;
  }}
